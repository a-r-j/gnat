library(shiny)
library(shinyjs)
library(nat)
# Use *Input() to create interactive input functions
# Use *Output() to place output areas in app UI
# Outputs built in server function
# Render functions place R objects into output areas designated in the UI

#fileInput(inputId = "input_neurons", label = "Upload Neurons",
#          accept = c(".swc", ".json", ".nrrd", ".VTK"), multiple = F),

ui <- fluidPage(
  useShinyjs(),
  ###################
  #     Catmaid     #
  ###################
  navbarPage(
            tabPanel("Catmaid",
                    div( id="Sidebar", 
           #includeCSS("errors.css"),
           #shinyURL.ui(display=F),
                        sidebarLayout(
                                      sidebarPanel(
                                 # includeHTML("url.js"),
                                 # hashProxy("hash"),
                                                    h3("Instructions"),
                                                    HTML("Interact with <b><span style='color: black;'>CATMAID</span></b> based on selections made elsewhere in <span style='color: red;'>gnat</span>."),
                                                    h3("CATMAID Login"),
                                                    textInput("catmaid_login_server",label = "Server"),
                                                    textInput("catmaid_login_token", label = "Token"),
                                                    textInput("catmaid_login_authname", label = "Auth name"),
                                                    textInput("catmaid_login_authpassword", label = "Auth Password"),
                                                    submitButton("Login")
                                                    ),
                               
                                      mainPanel(
                                                h3("Catmaid Functions"),
                                                actionButton("toggleSidebar", "Toggle sidebar")
                                               )
                                      )
                      )
                  )
  ############
  # Pairwise #
  ############
  #               tabPanel("Pairwise comparison",
  #                       sidebarLayout(
  #                                    sidebarPanel(
  #                                                h3("Instructions"),
  #                                                HTML("Enter two FlyCircuit neuron ids to compare with NBLAST. The <span style='color: red;'>query neuron will be plotted in red</span> in the 3D viewer to the right, while the <span style='color: blue;'>target neuron will be drawn in blue</span>."),
  #                                                h3("Query:"),
  #                                                textInput(".pairwise_query", "", "fru-M-200266"),
  #                                                h3("Target:"),
  #                                                textInput(".pairwise_target","", "fru-F-900020"),
  #                                                submitButton("NBLAST")
  #                                                ),
  #            
  #                                    mainPanel(
  #                                             h2("3D view"),
  #                                             #includeCSS("loader.css"),
  #                                             HTML("<div class='loader' style='position: absolute; left: 400px; top: 300px; z-index: -10000;'>Loading...</div>"),
  #                                             HTML("<div style='position: absolute; left: 220px; top: 270px; z-index: -10000; text-align: center; width: 400px; font-size: 30px;'>Loading...</div>"),
  #                                             rglwidgetOutput("view3d_pairwise", width="800px", height="800px"),
  #                                             conditionalPanel(condition = "output.pairwise_nblast_complete",
  #                                                             h2("NBLAST results"),
  #                                                             textOutput("pairwise_query_target"),
  #                                                             textOutput("pairwise_results"),
  #                                                             HTML("<a href='http://flybrain.mrc-lmb.cam.ac.uk/si/nblast/www/how/'>What do these scores mean?</a>")
  #                                                             )
  #                                            )
  #                                  )
  #                     )
   )
)

# Use server function to assemble inputs into outputs
# 1. Save output to output$ list
# 2. Build the output with a render*() function
# 3. Access input values with input$ list 
# {} braces allow passing of a multi-line R code block to renderPlot
server <- function(input, output, session) {
  catmaid_login(
    input$catmaid_login_server,
    input$catmiad_login_token,
    input$catmaid_login_authname,
    input$catmaid_login_authpassword
  )
  
  observeEvent(input$toggleSidebar, {
    shinyjs::toggle(id = "Sidebar")
  })
  
  # output$neuron_viewer <- renderRglwidget({
  #   title = "Neuron Viewer"
  #   #plot3d(input$input_neurons)
  # })
}

shinyApp(ui = ui, server = server)

